language: cpp

jobs:
  include:
    - os: osx
      compiler: gcc
      osx_image: xcode11.2    # includes gcc-9 by default
      env:
        - GCC_VER="9"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"
      after_script:
        - bash <(curl -s https://codecov.io/bash) -x /usr/bin/gcov-${GCC_VER}

    - os: osx
      compiler: clang
      osx_image: xcode11.2
      env:
        - MATRIX_EVAL=""

    - os: linux     # GCC-7 - Codecov build
      dist: bionic
      compiler: gcc
      env:
        - GCC_VER="7"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"
        - CONFIG_OPTS="-D ENABLE_COVERAGE:BOOL=TRUE"
      after_script:
        - bash <(curl -s https://codecov.io/bash) -x /usr/bin/gcov-${GCC_VER}

    - os: linux     # GCC-8 build
      dist: bionic
      compiler: gcc
      addons: { apt: { packages: ['gcc-8', 'g++-8', 'doxygen'] } }
      env:
        - GCC_VER="8"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"

    - os: linux     # GCC-9 build
      dist: bionic
      compiler: gcc
      addons: { apt: { sources: ['ubuntu-toolchain-r-test'],
                       packages: ['gcc-9', 'g++-9', 'doxygen'] } }
      env:
        - GCC_VER="9"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"

    - os: linux     # GCC-10 build
      dist: bionic
      compiler: gcc
      addons: { apt: { sources: ['ubuntu-toolchain-r-test'],
                       packages: ['gcc-10', 'g++-10', 'doxygen'] } }
      env:
        - GCC_VER="10"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"

    - os: linux     # Clang-6 build
      dist: bionic
      compiler: clang
      addons: { apt: { packages: ['clang-6.0', 'doxygen'] } }
      env:
        - CLANG_SEMVER="6.0"
        - MATRIX_EVAL="CC=clang-${CLANG_SEMVER} && CXX=clang++-${CLANG_SEMVER}"

    - os: linux     # Clang-8 build
      dist: bionic
      compiler: clang
      addons: { apt: { packages: ['clang-8', 'doxygen'] } }
      env:
        - CLANG_VER="8"
        - MATRIX_EVAL="CC=clang-${CLANG_VER} && CXX=clang++-${CLANG_VER}"

    - os: linux     # Clang-9 build
      dist: bionic
      compiler: clang
      addons: { apt: { packages: ['clang-9', 'doxygen'] } }
      env:
        - CLANG_VER="9"
        - MATRIX_EVAL="CC=clang-${CLANG_VER} && CXX=clang++-${CLANG_VER}"

    - os: linux     # Clang-10 build
      dist: bionic
      compiler: clang
      addons: { apt: { packages: ['doxygen'] } }
      env:
        - CLANG_VER="10"
        - MATRIX_EVAL="CC=clang-${CLANG_VER} && CXX=clang++-${CLANG_VER}"
      before_install:   # Add sources disallowed by travis-ci
        # Add LLVM repo and GPG key so we can install clang-10
        - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        - echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main" | sudo tee -a /etc/apt/sources.list
        - sudo apt-get -qq update
        - sudo apt-get -y install clang-10

    # Try many of the cmake options
    # We can't do every combination of options, so we will try for a reasonable subset
    - os: linux  # Clang-9 sanitize-all-the-things build
      dist: bionic
      compiler: clang
      addons: { apt: { packages: ['clang-9', 'llvm-9-dev', 'libclang-9-dev'] } }
      env:
        - CLANG_VER="9"
        - CLANG_SEMVER="9.0"
        - MATRIX_EVAL="CC=clang-${CLANG_VER} && CXX=clang++-${CLANG_VER}"
        - CONFIG_OPTS="-D ENABLE_INCLUDE_WHAT_YOU_USE:BOOL=ON \
                       -D ENABLE_CLANG_TIDY:BOOL=ON \
                       -D ENABLE_CPPCHECK:BOOL=ON \
                       -D ENABLE_SANITIZER_ADDRESS:BOOL=ON \
                       -D ENABLE_SANITIZER_MEMORY:BOOL=ON \
                       -D ENABLE_SANITIZER_THREAD:BOOL=ON \
                       -D ENABLE_SANITIZER_UNDEFINED_BEHAVIOR:BOOL=ON"
      install:
        - eval "${MATRIX_EVAL}"
        - git clone https://github.com/include-what-you-use/include-what-you-use.git
        - cd include-what-you-use && git checkout "clang_${CLANG_SEMVER}"
        - mkdir build && cd build
        - cmake -G "Unix Makefiles" -DCMAKE_PREFIX_PATH=/usr/lib/llvm-${CLANG_VER} -DCMAKE_INSTALL_PREFIX=./ ..

    - os: linux  # GCC-9 sanitize-all-the-things build, minus IWYU
      dist: bionic
      compiler: gcc
      addons: { apt: { sources: ['ubuntu-toolchain-r-test'],
                       packages: ['cppcheck', 'gcc-9', 'g++-9'] } }
      env:
        - GCC_VER="9"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"
        - CONFIG_OPTS="-D ENABLE_CLANG_TIDY:BOOL=ON \
                       -D ENABLE_CPPCHECK:BOOL=ON \
                       -D ENABLE_SANITIZER_ADDRESS:BOOL=ON \
                       -D ENABLE_SANITIZER_MEMORY:BOOL=ON \
                       -D ENABLE_SANITIZER_THREAD:BOOL=ON \
                       -D ENABLE_SANITIZER_UNDEFINED_BEHAVIOR:BOOL=ON"

    - os: linux     # unity build GCC-7
      dist: bionic
      compiler: gcc
      env:
        - GCC_VER="7"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"
        - CONFIG_OPTS="-D ENABLE_UNITY:BOOL=ON"

    - os: linux     # pch build GCC-7
      dist: bionic
      compiler: gcc
      env:
        - GCC_VER="7"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"
        - CONFIG_OPTS="-D ENABLE_PCH:BOOL=ON"

    - os: linux     # ipo build GCC-7
      dist: bionic
      compiler: gcc
      env:
        - GCC_VER="7"
        - MATRIX_EVAL="CC=gcc-${GCC_VER} && CXX=g++-${GCC_VER}"
        - CONFIG_OPTS="-D ENABLE_IPO:BOOL=ON"

before_script:
  # Set CC and CXX
  - eval "${MATRIX_EVAL}"

  # Set default version of Python to 3: works the same way on Mac and Linux
  - pip install virtualenv
  - virtualenv -p python3 ~/venv
  - source ~/venv/bin/activate

  # Fail if we are using the wrong Python
  - python --version | grep -iE 'python\s*3'
  - pip    --version | grep -iE 'python\s*3'

  # Install Conan using Python 3.
  - pip install conan cmake

  # Fail if we can't run Conan.
  - conan --version


script:
  - cmake "${CONFIG_OPTS}" .
  - cmake --build . -- -j2
  - ctest -j2



